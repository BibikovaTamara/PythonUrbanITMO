# -*- coding: utf-8 -*-
"""Копия блокнота "PythonUrban_lab2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z9xwjFR1GmvEHk9f2ABS_SPxG-oUxDfi

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install pandas geopandas mapclassify osmnx keplergl leafmap

# TODO собрать импорты всех модулей в одном месте
import geopandas as gpd
import osmnx as ox
import pandas as pd
from IPython.display import Javascript
import leafmap.kepler as leafmap

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "Пушкинский район, Санкт-Петербург"  # название территории для которой будут строиться слои

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/

KGIOP_FILE_URL = "https://raw.githubusercontent.com/BibikovaTamara/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson"

STREETS_FILE_URL = "https://raw.githubusercontent.com/BibikovaTamara/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"  # ссылка на слой с улицами



"""## Территория

### Загрузка территории из OSM (Extract)
"""

district = ox.geocode_to_gdf(TERRITORY_NAME) # "Пушкинский район, Санкт-Петербург" TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

gdf = gpd.read_file(STREETS_FILE_URL, mask=district)

gdf = gpd.read_file(STREETS_FILE_URL, mask=district)# TODO отфильтровать улицы по маске геометрии территории полученной ранее

gdf.info(STREETS_FILE_URL, )

"""### Обработка данных с улицами (Transform)"""

rename_columns = {
    "name":"Название",
} 
gdf.rename(columns=rename_columns, inplace=True)   # TODO сгруппировать и объединить геометрии с одинаковыми названиями

gdf = gdf.dissolve(by="Название")

"""### Сохранение слоя с улицами (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry

# TODO для того чтобы переименовать индекс, нужно обратиться и нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)

gdf.to_crs(4326).to_file('union_streets.geojson', driver = 'GeoJSON') # TODO сохранить слой в географической проекции в формате GeoJSON

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

gdf_kgiop = gpd.read_file(KGIOP_FILE_URL, mask=district) # TODO отфильтровать улицы по маске геометрии территории полученной ранее

"""### Обработка объектов культурного наследия (Transform)"""

gdf_kgiop["lon"] = gdf.to_crs(3857).geometry.centroid.to_crs(4326).x # TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf_kgiop["lat"] = gdf.to_crs(3857).geometry.centroid.to_crs(4326).y

"""### Сохранение слоя с объектами культурного наследия (Load)"""

rename_columns_kgiop = {
    "id":"Номер ОКН",
    "ensemble_name":"Название ансамбля",
    "object_name":"Название ОКН",
    "occurrence_time":"Дата постановки на учет",
    "object_location":"Адрес ОКН",
    "historical_cotegory":"Категория ОКН",
    "normative_act":"НПА",
    "object_type":"Тип ОКН",
}   # ОКН - объект культурного наследия, НПА - нормативно-правовой акт, TODO переименовать столбцы в русские названия, кроме столбца geometry
gdf_kgiop.rename(columns=rename_columns_kgiop, inplace=True)



gdf_kgiop.to_crs(4326).to_file('kgiop.geojson', driver = 'GeoJSON') # TODO сохранить слой в географической проекции в формате GeoJSON

def xy_centroid(district: gpd.GeoDataFrame):
    return district.centroid[0].y, district.centroid[0].x

m = leafmap.Map(center=xy_centroid(district), zoom=12, height=600, widescreen=False)
m.add_gdf(gdf, "Streets")
m.add_gdf(gdf_kgiop, "OKN")
m

